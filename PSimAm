class PSimAM(nn.Module):
    def __init__(self, channels, e_lambda=1e-3):
        super(ResSimAM, self).__init__()
        self.activation = nn.Sigmoid()
        self.e_lambda = e_lambda
        
    def forward(self, fg):
        """
        fg: global features (B, C, G, K)
        """
        X = self.squash(fg) 
        b, c, g, k = X.size()
        n = g * k - 1  
        mean = X.mean(dim=[2, 3], keepdim=True)
        d = (X - mean).pow(2)
        v = d.sum(dim=[2, 3], keepdim=True) / n
        E_inv = d / (4 * (v + self.e_lambda)) + 0.5
        return X * self.activation(E_inv) + X
